{"version":3,"file":"sdkinfo.js","sourceRoot":"","sources":["../../../src/integrations/sdkinfo.ts"],"names":[],"mappings":";;;AACA,uCAAuC;AAEvC,sCAAmD;AACnD,sCAAoC;AAEpC,sCAAsC;AACtC;IAAA;QAME;;WAEG;QACI,SAAI,GAAW,OAAO,CAAC,EAAE,CAAC;QAEzB,mBAAc,GAAmB,IAAI,CAAC;IAsChD,CAAC;IApCC;;OAEG;IACI,2BAAS,GAAhB,UAAiB,uBAAoD;QAArE,iBAgCC;QA/BC,uBAAuB,CAAC,UAAM,KAAK;;;;;6BAG7B,CAAA,gBAAM,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,cAAc,KAAK,IAAI,CAAA,EAAzD,wBAAyD;;;;wBAEzD,KAAA,IAAI,CAAA;wBAAkB,qBAAM,gBAAM,CAAC,kBAAkB,EAAE,EAAA;;wBAAvD,GAAK,cAAc,GAAG,SAAiC,CAAC;;;;wBAExD,qGAAqG;wBACrG,cAAM,CAAC,IAAI,CACT,sGAAsG,CACvG,CAAC;;;wBAIN,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,YAAY,CAAC;wBAChD,KAAK,CAAC,GAAG,yCACJ,KAAK,CAAC,GAAG,KACZ,IAAI,EAAE,kBAAQ,EACd,QAAQ,mBACH,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EACzC,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,CAAC;gCACzD;oCACE,IAAI,EAAE,uBAAuB;oCAC7B,OAAO,EAAE,qBAAW;iCACrB;gCAEH,OAAO,EAAE,qBAAW,GACrB,CAAC;wBAEF,sBAAO,KAAK,EAAC;;;aACd,CAAC,CAAC;IACL,CAAC;IA/CD;;OAEG;IACW,UAAE,GAAW,SAAS,CAAC;IA6CvC,cAAC;CAAA,AAjDD,IAiDC;AAjDY,0BAAO","sourcesContent":["import type { EventProcessor, Integration, Package } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { SDK_NAME, SDK_VERSION } from '../version';\nimport { NATIVE } from '../wrapper';\n\n/** Default SdkInfo instrumentation */\nexport class SdkInfo implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'SdkInfo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = SdkInfo.id;\n\n  private _nativeSdkInfo: Package | null = null;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (e: EventProcessor) => void): void {\n    addGlobalEventProcessor(async event => {\n      // The native SDK info package here is only used on iOS as `beforeSend` is not called on `captureEnvelope`.\n      // this._nativeSdkInfo should be defined a following time so this call won't always be awaited.\n      if (NATIVE.platform === 'ios' && this._nativeSdkInfo === null) {\n        try {\n          this._nativeSdkInfo = await NATIVE.fetchNativeSdkInfo();\n        } catch (_) {\n          // If this fails, go ahead as usual as we would rather have the event be sent with a package missing.\n          logger.warn(\n            '[SdkInfo] Native SDK Info retrieval failed...something could be wrong with your Sentry installation.',\n          );\n        }\n      }\n\n      event.platform = event.platform || 'javascript';\n      event.sdk = {\n        ...event.sdk,\n        name: SDK_NAME,\n        packages: [\n          ...((event.sdk && event.sdk.packages) || []),\n          ...((this._nativeSdkInfo && [this._nativeSdkInfo]) || []),\n          {\n            name: 'npm:@sentry/capacitor',\n            version: SDK_VERSION,\n          },\n        ],\n        version: SDK_VERSION,\n      };\n\n      return event;\n    });\n  }\n}\n"]}